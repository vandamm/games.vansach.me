name: Update gamecache.sqlite.gz with BGG data

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  index:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed to create/update releases
    steps:
      - name: Check enabled (secret present?)
        id: enabled
        env:
            GAMECACHE_GITHUB_TOKEN: ${{ secrets.GAMECACHE_GITHUB_TOKEN }}
            MYBGG_GITHUB_TOKEN: ${{ secrets.MYBGG_GITHUB_TOKEN }}
        run: |
          if [ -n "$GAMECACHE_GITHUB_TOKEN" ] || [ -n "$MYBGG_GITHUB_TOKEN" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            if [ -z "$GAMECACHE_GITHUB_TOKEN" ] && [ -n "$MYBGG_GITHUB_TOKEN" ]; then
              echo "::warning::Using deprecated MYBGG_GITHUB_TOKEN (rename to GAMECACHE_GITHUB_TOKEN)." >&2
            else
              echo "Hourly updates enabled." >&2
            fi
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "::notice::GAMECACHE_GITHUB_TOKEN not set; skipping run." >&2
          fi
      - name: Checkout
        if: steps.enabled.outputs.enabled == 'true'
        uses: actions/checkout@v4
      - name: Setup Python
        if: steps.enabled.outputs.enabled == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Build & index (auto-skip if not enabled)
        if: steps.enabled.outputs.enabled == 'true'
        env:
          GAMECACHE_GITHUB_TOKEN: ${{ secrets.GAMECACHE_GITHUB_TOKEN }}
          MYBGG_GITHUB_TOKEN: ${{ secrets.MYBGG_GITHUB_TOKEN }}
        run: |
          # Fallback: promote legacy token if new one absent
          if [ -z "$GAMECACHE_GITHUB_TOKEN" ] && [ -n "$MYBGG_GITHUB_TOKEN" ]; then
            export GAMECACHE_GITHUB_TOKEN="$MYBGG_GITHUB_TOKEN"
          fi
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          python scripts/download_and_index.py --debug
